package com.dongfeng.study.basicstudy.java.otherbasic;

/**
 * <b> Java抽象类（abstract class）学习 </b>
 *
 * @author eastFeng
 * @date 2021-04-21 19:17
 */
public abstract class AbstractStudy {



    /*
     * 抽象类（abstract class）就是抽象的类。
     * 抽象是相对于具体而言的，一般而言，具体类有直接对应的对象，而抽象类没有，它表达的是抽象概念。
     * 一般是具体类的比较上层的父类。比如，狗是具体对象，而动物则是抽象概念；
     * 樱桃是具体对象，而水果则是抽象概念；正方形是具体对象，而图形则是抽象概念。
     *
     * 定义了抽象方法的类必须被声明为抽象类，不过，抽象类可以没有抽象方法。
     * 抽象类和具体类一样，可以定义具体方法、实例变量等，
     * 【抽象类和和具体类的核心区别是，抽象类不能创建对象，而具体类可以。】
     * 虽然抽象类不能创建对象，但是却可以声明构造方法，一般是protect访问权限。
     *
     * 一个类在继承抽象类后，必须实现抽象类中定义的所有抽象方法，除非它自己也声明为抽象类。
     *
     * 为什么需要抽象类？
     * 抽象方法和抽象类看上去是多余的，对于抽象方法，不知道如何实现，定义一个空方法体不就行了吗？
     * 而抽象类不让创建对象，看上去只是增加了一个不必要的限制。
     * 答：
     * 1. 引入抽象方法和抽象类，是Java提供的一种语法工具，对于一些类和方法，引导使用者正确使用它们，减少误用。
     * 使用抽象方法而非空方法体，子类就知道它必须要实现该方法，而不可能忽略，若忽略Java编译器会提示错误。
     * 使用抽象类，类的使用者创建对象的时候，就知道必须要使用某个具体子类，而不可能误用不完整的父类。
     * 无论是编写程序，还是平时做其他事情，每个人都可能会犯错，减少错误不能只依赖人的优秀素质，还需要一些机制，
     * 使得一个普通人都容易把事情做对，而难以把事情做错。抽象类就是Java提供的这样一种机制。
     *
     * 抽象类和接口有类似之处：
     * 都不能用于创建对象，都可以声明抽象方法。如果抽象类中只定义了抽象方法，那抽象类和接口就更像了。
     * 【抽象类和接口根本上是不同的：接口中不能定义实例变量，而抽象类可以】，一个类可以实现多个接口，但只能继承一个类。
     *
     * 抽象类和接口是配合而非替代关系，它们经常一起使用，
     * 接口声明能力，抽象类提供默认实现，实现全部或部分方法，一个接口经常有一个对应的抽象类。
     * 比如，在Java类库中，有：
     * Collection接口和对应的AbstractCollection抽象类。
     * List接口和对应的AbstractList抽象类。
     * Map接口和对应的AbstractMap抽象类。
     * 对于需要实现接口的具体类而言，有两个选择：
     * 一个是实现接口，自己实现全部方法；
     * 另一个则是继承抽象类，然后根据需要重写方法。
     * 继承的好处是复用代码，只重写需要的部分即可，需要编写的代码比较少，容易实现。
     * 不过，如果这个具体类已经有父类了，那就只能选择实现接口了。
     * 继承抽象类（该抽象类实现了接口）而不是直接实现接口的好处：
     * 降低接口实现类对接口实现过程的难度，将接口中不需要使用的抽象方法交给抽象类完成。
     */

    /**
     * 抽象类和接口根本上不同点：接口中不能定义实例变量，而抽象类可以
     */
    private String des;

    /**
     * 虽然抽象类不能创建对象，但是却可以声明构造方法，一般是protect访问权限。
     * <p> 对于子类构造函数的调用，通常是隐式的。
     */
    protected AbstractStudy(){}


    /**
     * 抽象方法是相对于具体方法而言的，具体方法有实现代码，而抽象方法只有声明，没有实现。
     * <p> 定义了抽象方法的类必须被声明为抽象类，不过，抽象类可以没有抽象方法。
     */
    public abstract void test();

    /**
     * 实例方法
     */
    public String getDes(){
        return des;
    }
}
